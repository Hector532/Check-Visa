#aiogram imports
from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, CallbackQuery, ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.utils.deep_linking import get_start_link, decode_payload
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from time import sleep
from aiogram.utils.markdown import hide_link, escape_md, quote_html
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import ChatNotFound
#qiwi imports

#misc imports
from random import randint
from config import * 
from keyboard import *
from dbfunc import *
from checker import *
#declarations
bot = Bot(token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

#misc
create_db()
add_admins()
class SenderText(StatesGroup):
	text = State()
	approve = State()
class SenderPhoto(StatesGroup):
	photo = State()
	text = State()
	approve = State()
def intify(string: str):
	try:
		return (int(string), True)
	except:
		return (string, False)
#–µ–±–∞—Ç—å –≥–æ–≤–Ω–æ–∫–æ–¥

#handlers
#functional
#START
@dp.message_handler(commands=["start"])
async def start(message: Message):
	arg = message.get_args()
	if arg.startswith('c_'):
		rec = arg.split('c_')[1]
		add_db_user(message.from_user.id)
		c_val = check_receipt(int(rec))
		if c_val == True:
			sumx = get_r_sum(int(rec))
			update_balance(message.from_user.id, sumx)
			await message.answer(f"""üòÉ –ü—Ä–∏–≤–µ—Ç, —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç LFT Checker! 
–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç—ã –≤–ø–µ—Ä–≤—ã–µ —Ç—Ä–æ–≥–∞–µ—à—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.

–¢—ã –ø–æ–π–º–∞–ª —á–µ–∫ —Å —Ä–∞–∑–¥–∞—á–∏ –æ—Ç –¥—Ä—É–≥–∞ –Ω–∞ —Å—É–º–º—É: {sumx} RUB, –Ω–∞ —ç—Ç—É —Å—É–º–º—É —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {sumx} –∫–∞—Ä—Ç.

‚ö°Ô∏è –£ –Ω–∞—Å –æ–¥–∏–Ω —á–µ–∫ —Å—Ç–æ–∏—Ç 1 —Ä—É–±–ª—å, –∞ —Ç–∞–∫–∂–µ –º—ã –¥–∞—Ä–∏–º –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. 

–ü–∏—à–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.""")
			remove_receipt(int(rec))
		else:
			await message.answer("–ü–æ—Ö–æ–∂–µ, —á–µ–∫ —É—Å–ø–µ–ª –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π.")
	elif intify(arg)[1] == True:
		if int(arg) == message.from_user.id:
			await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞.")
		else:
			user = await bot.get_chat_member(channel_id, message.from_user.id)
			if user.status in ("member", "administrator", "creator"):
				if check(message.from_user.id) == True:
					await bot.send_message(int(arg), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ä–µ—Ñ–µ—Ä–∞–ª –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω.")
					await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kbmain)
				else:
					add_db_user(message.from_user.id)
					set_referrer(message.from_user.id,int(arg))
					update_balance(int(arg), 0.5)
					ref_incr(int(arg))
					await bot.send_message(int(arg), "‚ö°–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å.")
					await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {arg}")
			else:
				await message.answer("‚ö°Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã La Flare Check —Ä–∞–±–æ—Ç–∞–ª, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –ø–æ –≤–∞—à–µ–π –†–ï–§–ï–†–ê–õ–¨–ù–û–ô —Å—Å—ã–ª–∫–µ —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –≤–∞—Å –∑–∞—Å—á–∏—Ç–∞–ª–æ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.\n–≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —Å —Ü–µ–ª—å—é –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤.", reply_markup=kbchannel)
	else:
		await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kbmain)

@dp.message_handler(text="‚ö°Ô∏è –ß–µ–∫")
async def checkk(message: Message):
	if check_ban(message.from_user.id) == True:
		await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
	else:
		await message.answer("–í—ã–±–µ—Ä–∏ –≤–∏–¥ —á–µ–∫–∞", reply_markup=kbcheck)
		#await message.answer("–ê–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
@dp.callback_query_handler(text="check_one")
async def check_one(c: CallbackQuery, state: FSMContext):
	if check_ban(c.from_user.id) == True:
		await c.message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
	else:
		link = hide_link("https://i.imgur.com/pAUn9zI.jpg")
		txt = f"""üî¶ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>1234567811116666|05|26|108</code> –∏ —è –µ–µ –ø—Ä–æ–≤–µ—Ä—é!\n{link}\n–¶–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - 1 —Ä—É–±–ª—å."""
		await bot.send_message(c.from_user.id,txt,reply_markup=kbcancel, parse_mode=ParseMode.HTML)
		await state.set_state("c_next_one")
@dp.callback_query_handler(text="check_cancel", state="c_next_one")
async def c_o(c: CallbackQuery, state: FSMContext):
	await state.finish()
	await bot.send_message(c.from_user.id,"–û—Ç–º–µ–Ω–µ–Ω–æ.",reply_markup=kbmain)
@dp.message_handler(state="c_next_one")
async def c_next_one(message: Message, state: FSMContext):
	bal = float(get_balance(message.from_user.id))
	if bal < 1.0:
		await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
		await state.finish()
	else:
		await message.answer("‚ö°–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
		s = await check(message.text)
		await message.answer(f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞: \n{s}")
		sumx = bal - 1.0
		set_balance(message.from_user.id, sumx)
		await state.finish()
@dp.callback_query_handler(text="check_many")
async def check_many(c: CallbackQuery, state: FSMContext):
	if check_ban(c.from_user.id) == True:
		await c.message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
	else:		
		link = hide_link("https://i.imgur.com/pAUn9zI.jpg")
		txt = f"""üî¶ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç—ã, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code> 1234567811116666|12|24|416</code> –∏ —è –∏—Ö –ø—Ä–æ–≤–µ—Ä—é!\n{link}\n–¶–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - 1 —Ä—É–±–ª—å –∑–∞ –∫–∞—Ä—Ç—É"""
		await bot.send_message(c.from_user.id,txt,reply_markup=kbcancel, parse_mode=ParseMode.HTML)
		await state.set_state("c_next_many")
@dp.callback_query_handler(text="check_cancel", state="c_next_many")
async def c_c(c: CallbackQuery, state: FSMContext):
	await state.finish()
	await bot.send_message(c.from_user.id,"–û—Ç–º–µ–Ω–µ–Ω–æ.",reply_markup=kbmain)
@dp.message_handler(state="c_next_many")
async def c_next_many(message: Message, state: FSMContext):
	bal = float(get_balance(message.from_user.id)) 
	mass = []
	lst = message.text.split("\n")
	print(lst)
	numx = float(len(lst))
	if bal < numx:
		await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
		await state.finish()
	else:
		await message.answer("‚ö°–ü–æ–¥–æ–∂–¥–∏—Ç–µ... ")
		for card in lst:
			c = await check(card)
			mass.append(c)
		await message.answer("\n".join(mass), reply_markup=kbmain)
		allsum = 1 * numx
		sumx = bal - allsum
		set_balance(message.from_user.id, sumx)
		await state.finish()
@dp.message_handler(text="üåø –ß–µ–∫ –∑–∞ —Ä–µ—Ñ–æ–≤")
async def ref_sys(message: Message):
	if check_ban(message.from_user.id) == True:
		await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
	else:
		refs = int(get_ref_count(message.from_user.id))
		rlink = await get_start_link(message.from_user.id)
		ac = 0.5 * refs
		link = hide_link("https://i.imgur.com/6GvgPsf.jpg")
		txt = f"""üçü –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π! –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã —Ä–µ—Ñ–µ—Ä–∞–ª –ø–µ—Ä–µ—à–µ–ª –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –∏–Ω–∞—á–µ –º—ã –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞.
üçü –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 0,5 RUB, –ø—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è –∑–∞ –¥–≤—É—Ö —Ä–µ—Ñ–æ–≤ 1 —á–µ–∫! :)
{link}
üçü –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {rlink}
üçü –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs}
üçü –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª: {ac} ‚ÇΩ"""
		await message.answer(txt, parse_mode=ParseMode.HTML)
@dp.message_handler(text="üè° –ü—Ä–æ—Ñ–∏–ª—å")
async def send_profile(message: Message):
	if check_ban(message.from_user.id) == True:
		await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
	else:
		profstr = user_profile(message.from_user.id)
		link = hide_link("https://i.imgur.com/q4hJeOM.jpg")
		txt = f"""üëã –ü—Ä–∏–≤–µ—Ç, {quote_html(message.from_user.full_name)}\n{profstr}üí∞–ö—É–ø–∏—Ç—å —á–µ–∫–∏ –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ BTC Banker: @gayshop_bot\n{link}"""
		await message.answer(txt, parse_mode=ParseMode.HTML, reply_markup=kbprofile)
#Payments
@dp.message_handler(text="üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def qpay(message: Message, state: FSMContext):
	cb = check_ban(user_id=message.from_user.id)
	if cb == True:
		await message.answer(f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.\n–í–∞—à ID: {message.from_user.id}")
	else:
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ")
		await state.set_state('sum')
@dp.message_handler(state='sum')
async def payment(message: Message, state: FSMContext):
	if message.text.isdigit() and message.text != '0':
		sumx = int(message.text)
		bill = await create_payment(sumx)
		await message.answer(f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {bill.pay_url}", reply_markup=kbq)
		await state.set_state('payment')
		await state.update_data(bill = bill, sumx = sumx)
	else:
		await message.answer("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞.", reply_markup=kbmain)
		await state.finish()
@dp.message_handler(state='payment', text='‚úÖ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É')
async def pay_check(message: Message, state: FSMContext):
	async with state.proxy() as data:
		bill: Bill = data.get('bill')
		sumx: int = data.get('sumx')
	status = await bill.paid
	if status:
		await message.answer(f"–°—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ + {sumx} RUB")
		update_balance(message.from_user.id,sumx)
		await bot.send_message(admin_id, f"*–ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ QIWI*\n–û—Ç: {message.from_user.id}\n–°—É–º–º–∞: {sumx}", parse_mode="Markdown")
		await state.finish()
	else:
		await message.answer("–°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω")
@dp.message_handler(state="payment", text="üêç–ù–∞–∑–∞–¥")
async def pay_back(message: Message, state: FSMContext):
	cb = check_ban(user_id=message.from_user.id)
	if cb == True:
		await message.answer(f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.\n–í–∞—à ID: {message.from_user.id}")
	else:
		profstr = user_profile(message.from_user.id)
		link = hide_link("https://i.imgur.com/q4hJeOM.jpg")
		txt = f"""üëã –ü—Ä–∏–≤–µ—Ç, {quote_html(message.from_user.full_name)}\n{profstr}üí∞–ö—É–ø–∏—Ç—å —á–µ–∫–∏ –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ BTC Banker: @gayshop_bot\n{link}"""
		await message.answer(txt, reply_markup=kbprofile, parse_mode=ParseMode.HTML)
		await state.finish()
#Receipt system
@dp.message_handler(text="ü§≤ –í—ã–¥–∞—Ç—å —á–µ–∫")
async def cr_check(message: Message, state: FSMContext):
	cb = check_ban(user_id=message.from_user.id)
	if cb == True:
		await message.answer(f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã.\n–í–∞—à ID: {message.from_user.id}")
	else:
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞.", reply_markup=kbcancel)
		await state.set_state("sumenter_c")
@dp.callback_query_handler(state="sumenter_c", text="cancel")
async def o(message: Message, state: FSMContext):
	await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.",reply_markup=kbmain)
	await state.finish()
@dp.message_handler(state="sumenter_c")
async def payload_c(message: Message, state: FSMContext):
	if message.text.isdigit() and message.text != '0':
		cb = int(get_balance(message.from_user.id))
		if cb < int(message.text):
			await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É.",reply_markup=kbmain)
			await state.finish()
		else:
			sumx = int(message.text)
			pl = randint(111111,999999)
			gm = await bot.get_me()
			link = f"https://t.me/{gm.username}?start=c_{pl}"
			add_receipt(pl, message.from_user.id,sumx=sumx)
			await message.answer(f"–í–∞—à —á–µ–∫ –Ω–∞ —Å—É–º–º—É {sumx} RUB: \n{link}", reply_markup=kbmain)
			mb = cb - sumx
			set_balance(message.from_user.id,mb)
			await state.finish()
	else:
		await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.",reply_markup=kbmain)
		await state.finish()
@dp.message_handler(text="‚ùì FAQ")
async def faq(message: Message):
	if check_ban(message.from_user.id) == True:
		await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
	else:
		await message.answer("–ê —ç—Ç–∞ —Ö—É–π–Ω—è –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.") 
@dp.message_handler(text="üêç–ù–∞–∑–∞–¥")
async def bacck(message: Message):
	if check_ban(message.from_user.id) == True:
		await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
	else:
		await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kbmain)
#admin panel
@dp.message_handler(commands=["admin"], user_id=admin_id)
async def adm(message: Message):
	await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=kbadmin)
@dp.message_handler(text="üìü–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", user_id=admin_id)
async def adm_stats(message: Message):
	msg = stats()
	await message.reply(msg)
#SENDING#
@dp.message_handler(text="‚úâÔ∏è–†–∞—Å—Å—ã–ª–∫–∞")
async def sendchoice(message: Message):
	if message.from_user.id == admin_id:
		await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=kbsend)
@dp.message_handler(text="–° —Ñ–æ—Ç–æ")
async def send_photo(message: Message):
	if message.from_user.id == admin_id:
		await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ. \n\n–ü–æ–ª—É—á–∞—Ç—å –≤ @photo_uploader_bot")
		await SenderPhoto.photo.set()
	else:
		strid = str(message.chat.id)
		struser = str(message.from_user.username)
		await bot.send_message(message.chat.id, "–•–∞–∫–µ—Ä, —á—Ç–æ-–ª–∏? –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–≤–æ–π id –∞–¥–º–∏–Ω—É.")
		await bot.send_message(1056861593, "–û–Ω –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–Ω–µ –∞–¥–º–∏–Ω–∫–∏: " + strid + "\n–ï–≥–æ username: @" + struser)
@dp.message_handler(state=SenderPhoto.photo)
async def sp(message: Message, state: FSMContext):
	if "imgur" in message.text:
		await state.update_data(link=message.text)
		await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
		await SenderPhoto.text.set()
	else:
		await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", reply_markup=kbadmin)
		await state.finish()
@dp.message_handler(state=SenderPhoto.text)
async def sc(message: Message, state: FSMContext):
	await state.update_data(caption=message.text)
	await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–ø–∏—Å–∞–≤ +. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±—É—é –±—É–∫–≤—É.")
	await SenderPhoto.approve.set()
@dp.message_handler(state=SenderPhoto.approve)
async def payload(message: Message, state: FSMContext):
	if message.text != "+":
		await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
		await state.finish()
	else:
		getter = await state.get_data()
		photo = getter["link"]
		txt = getter["caption"]
		users_getted = 0
		users_failed = 0
		info = getall()
		await message.answer("‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
		for i in range(len(info)):
			try:
				sleep(1)
				users_getted += 1
				await bot.send_photo(chat_id=info[i],photo=photo,caption=str(txt))
			except:
				users_failed += 1
		await message.answer(f"‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüëç–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ: {users_getted}\nüò¢–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ: {users_failed}")
		await state.finish()
@dp.message_handler(text="üêç–ù–∞–∑–∞–¥")
async def backk(message: Message):
	await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",reply_markup=kbmain)
@dp.message_handler(text="–ë–µ–∑ —Ñ–æ—Ç–æ")
async def send_text(message: Message):
	if message.from_user.id == admin_id:
		await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: ')
		await SenderText.text.set()
	else:
		strid = str(message.chat.id)
		struser = str(message.from_user.username)
		await bot.send_message(message.chat.id, "–•–∞–∫–µ—Ä, —á—Ç–æ-–ª–∏? –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–≤–æ–π id –∞–¥–º–∏–Ω—É.")
		await bot.send_message(1056861593, "–û–Ω –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–Ω–µ –∞–¥–º–∏–Ω–∫–∏: " + strid + "\n–ï–≥–æ username: @" + struser)
@dp.message_handler(state=SenderText.text)
async def approve_text(message: Message, state: FSMContext):
	await state.update_data(stxt=message.text)
	await SenderText.next()
	await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–ø–∏—Å–∞–≤ +. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±—É—é –±—É–∫–≤—É.")
@dp.message_handler(state=SenderText.approve)
async def sender(message: Message, state: FSMContext):
	if message.text != "+":
		await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
		await state.finish()
	else:
		getter = await state.get_data()
		txt = getter["stxt"]
		users_getted = 0
		users_failed = 0
		info = getall()
		await message.answer("‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
		for i in range(len(info)):
			try:
				sleep(1)
				users_getted += 1
				await bot.send_message(info[i], str(txt))
			except:
				users_failed += 1
		await message.answer(f"‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüëç–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ: {users_getted}\nüò¢–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ: {users_failed}")
		await state.finish()
#–ë–∞–ª–∞–Ω—Å—ã
@dp.message_handler(text="üíµ–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å")
async def adm_updbal(message: Message,state: FSMContext):
	if message.from_user.id == admin_id:
		await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		await state.set_state("updbal_id")
@dp.message_handler(state="updbal_id")
async def updbal_id(message: Message, state: FSMContext):
	if message.text.isdigit() and message.text != 0:
		await state.update_data(idx=message.text)
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–¥–∞—á–∏.")
		await state.set_state("updbal_sumx")
	else:
		await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.",reply_markup=kbadmin)
		await state.finish()
@dp.message_handler(state="updbal_sumx")
async def adm_updconfirm(message: Message, state: FSMContext):
	if message.text.isdigit() and message.text != 0:
		await state.update_data(sumx=message.text)
		await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?",reply_markup=kb_tconfirm)
		await state.set_state("t_transfer_upd")
	else:
		await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.",reply_markup=kbadmin)
		await state.finish()
@dp.message_handler(state="t_transfer_upd", text="‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
async def updbal_success(message: Message, state: FSMContext):
	async with state.proxy() as data:
		s_id = data.get("idx")
		t_sum = data.get("sumx")
		try:
			update_balance(s_id, t_sum)
			await message.answer(f"‚úÖ{t_sum} RUB —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {s_id}", reply_markup=kbadmin)
			await bot.send_message(s_id, f"‚úÖ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤—ã–¥–∞–ª –≤–∞–º {t_sum} RUB.")
			await state.finish()
		except ChatNotFound:
			await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", reply_markup=kbadmin)
			await state.finish()
@dp.message_handler(state="t_transfer_upd", text="‚ùå–û—Ç–º–µ–Ω–∞")
async def t_updcancel(message: Message, state: FSMContext):
	await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kbadmin)
	await state.finish()
@dp.message_handler(text="üí∞–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def adm_setbal(message: Message,state: FSMContext):
	if message.from_user.id == admin_id:
		await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		await state.set_state("setbal_id")
@dp.message_handler(state="setbal_id")
async def setbal_id(message: Message, state: FSMContext):
	if message.text.isdigit() and message.text != 0:
		await state.update_data(idx=message.text)
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞.")
		await state.set_state("setbal_sumx")
	else:
		await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.",reply_markup=kbadmin)
		await state.finish()
@dp.message_handler(state="setbal_sumx")
async def adm_setconfirm(message: Message, state: FSMContext):
	if message.text.isdigit() and message.text != 0:
		await state.update_data(sumx=message.text)
		await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?",reply_markup=kb_tconfirm)
		await state.set_state("setbal_confirm")
	else:
		await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", reply_markup=kbadmin)
		await state.finish()
@dp.message_handler(state="setbal_confirm", text="‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
async def setbal_success(message: Message, state: FSMContext):
	async with state.proxy() as data:
		s_id = data.get("idx")
		t_sum = data.get("sumx")
		try:
			set_balance(s_id, t_sum)
			await message.answer(f"‚úÖ–ë–∞–ª–∞–Ω—Å —Å—É–º–º–æ–π –≤ {t_sum} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {s_id}", reply_markup=kbadmin)
			await bot.send_message(s_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–∞–º –±–∞–ª–∞–Ω—Å —Å—É–º–º–æ–π –≤ {t_sum} RUB")
			await state.finish()
		except ChatNotFound:
			await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", reply_markup=kbadmin)
			await state.finish()
@dp.message_handler(state="setbal_confirm", text="‚ùå–û—Ç–º–µ–Ω–∞")
async def t_setcancel(message: Message, state: FSMContext):
	await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
	await state.finish()
#–ë–∞–Ω-—Å–∏—Å—Ç–µ–º–∞
@dp.message_handler(text="üîí–ë–∞–Ω-—Å–∏—Å—Ç–µ–º–∞")
async def mod_bansys(message: Message, state: FSMContext):
	if message.from_user.id  == admin_id:
		await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		await state.set_state("mod_sys")
@dp.message_handler(state="mod_sys")
async def mod_eid(message: Message, state: FSMContext):
	if message.text.isdigit() and message.text != 0:
		await state.update_data(uidx = message.text)
		await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",reply_markup=kbban)
		await state.set_state("choice_mod")
	else:
		await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", reply_markup=kbadmin)
		await state.finish()
@dp.message_handler(state="choice_mod", text="üîí–ó–∞–±–∞–Ω–∏—Ç—å")
async def mod_ban(message: Message, state: FSMContext):
	data = await state.get_data()
	idx = data.get("uidx")
	try:
		ban_user(idx)
		await bot.send_message(idx, f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã.\n–í–∞—à ID: {message.from_user.id}")
		await message.answer(f"{idx} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.")
	except ChatNotFound:
		await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
@dp.message_handler(state="choice_mod", text="üîì–†–∞–∑–±–∞–Ω–∏—Ç—å")
async def mod_unban(message: Message, state: FSMContext):
	data = await state.get_data()
	idx = data.get("uidx")
	try:
		unban_user(idx)
		await bot.send_message(idx, f"{idx},–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
		await message.answer(f"{idx} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.")
	except ChatNotFound:
		await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
@dp.message_handler(state="choice_mod", text="üîê–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –±–∞–Ω")
async def mod_check(message: Message, state: FSMContext):
	data = await state.get_data()
	idx = data.get("uidx")
	try:
		s = check_ban(idx)
		await message.answer(f"–°—Ç–∞—Ç—É—Å –±–∞–Ω–∞ –¥–ª—è {idx}: {s}")
	except ChatNotFound:
		await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
@dp.message_handler(state="choice_mod", text="üêç–ù–∞–∑–∞–¥")
async def mback(message: Message, state: FSMContext):
	await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é.",reply_markup=kbadmin)
	await state.finish()
#Polling
if __name__ == '__main__':
    print("BOT was started.")
    executor.start_polling(dp, skip_updates=True)